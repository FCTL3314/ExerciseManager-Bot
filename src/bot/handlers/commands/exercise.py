from aiogram import html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.handlers.commands import router
from src.bot.keyboards.inline.exercise import (
    get_skip_exercise_description_keyboard,
    get_skip_exercise_image_keyboard,
)
from src.bot.services.shortcuts.commands import (
    ADD_EXERCISE_COMMAND,
    START_WORKOUT_COMMAND,
)
from src.bot.services.shortcuts.message_templates import (
    ADD_EXERCISE_WORKOUT_SELECTION_MESSAGE,
    ADD_EXERCISE_NO_WORKOUTS_MESSAGE,
    INVALID_EXERCISE_NAME_MESSAGE,
    INVALID_URL_MESSAGE,
)
from src.bot.services.workout import send_select_workout_keyboard_or_error_message
from src.bot.states.workout import ExerciseAddingStates
from src.config import Settings
from src.services.business.workouts import WorkoutServiceProto
from src.services.validators import is_valid_url
from src.services.validators.duration import is_valid_duration_string
from src.services.validators.exercise import (
    is_name_valid as is_exercise_name_valid,
    is_exercise_duration_valid,
    is_exercise_break_time_valid,
)


@router.message(ADD_EXERCISE_COMMAND.filter())
async def command_add_exercise_handler(
    message: Message,
    state: FSMContext,
    workout_service: WorkoutServiceProto,
    settings: Settings,
) -> None:
    await send_select_workout_keyboard_or_error_message(
        text=ADD_EXERCISE_WORKOUT_SELECTION_MESSAGE,
        no_workouts_message=ADD_EXERCISE_NO_WORKOUTS_MESSAGE,
        message=message,
        user_id=message.from_user.id,
        workout_service=workout_service,
        limit=settings.pagination.workout.workouts_keyboard_paginate_by,
        buttons_per_row=settings.pagination.workout.workouts_keyboard_buttons_per_row,
    )
    await state.set_state(ExerciseAddingStates.waiting_for_workout_selection)


@router.message(ExerciseAddingStates.waiting_for_name_input)
async def process_add_exercise_name(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    name = message.text.strip()
    if not await is_exercise_name_valid(name, settings.validation.exercise):
        await message.answer(
            INVALID_EXERCISE_NAME_MESSAGE.format(
                min_length=settings.validation.exercise.name_min_length,
                max_length=settings.validation.exercise.name_max_length,
            ),
        )
        return

    await state.update_data(name=name)
    await state.set_state(ExerciseAddingStates.waiting_for_description_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f"üîπ {html.bold("–®–∞–≥ 2:")} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (—ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å—Å—è):",
        reply_markup=await get_skip_exercise_description_keyboard(),
    )


@router.message(ExerciseAddingStates.waiting_for_description_input)
async def process_add_exercise_description(message: Message, state: FSMContext) -> None:
    description = message.text.strip()

    await state.update_data(description=description)
    await state.set_state(ExerciseAddingStates.waiting_for_image_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f"{html.bold('–®–∞–≥ 3:')} –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        f"–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ {html.bold("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")}.",
        reply_markup=await get_skip_exercise_image_keyboard(),
    )


@router.message(ExerciseAddingStates.waiting_for_image_input)
async def process_add_exercise_image(message: Message, state: FSMContext) -> None:
    image = message.text.strip()
    if not await is_valid_url(image):
        await message.answer(INVALID_URL_MESSAGE)
        return

    await state.update_data(image=image)
    await state.set_state(ExerciseAddingStates.waiting_for_duration_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f" {html.bold("–®–∞–≥ 4:")} –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, {html.bold('1m')} –¥–ª—è 1 –º–∏–Ω—É—Ç—ã –∏–ª–∏ {html.bold('30s')} –¥–ª—è 30 —Å–µ–∫—É–Ω–¥:"
    )


@router.message(ExerciseAddingStates.waiting_for_duration_input)
async def process_add_exercise_duration(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    duration = message.text.strip()

    if not await is_valid_duration_string(duration):
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç {html.bold('1m')} –∏–ª–∏ {html.bold('30s')}:"
        )
        return

    if not await is_exercise_duration_valid(duration, settings.validation.exercise):
        await message.answer(
            f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
        )
        await state.set_state(ExerciseAddingStates.waiting_for_duration_input)
        return

    await state.update_data(duration=duration)
    await state.set_state(ExerciseAddingStates.waiting_for_break_time_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f"üîπ {html.bold("–®–∞–≥ 5:")} –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, {html.bold('1m')} –¥–ª—è 1 –º–∏–Ω—É—Ç—ã –∏–ª–∏ {html.bold('30s')} –¥–ª—è 30 —Å–µ–∫—É–Ω–¥:"
    )


@router.message(ExerciseAddingStates.waiting_for_break_time_input)
async def process_add_exercise_break_time(
    message: Message,
    state: FSMContext,
    workout_service: WorkoutServiceProto,
    settings: Settings,
) -> None:
    data = await state.get_data()

    workout_id = data["workout_id"]
    name = data["name"]
    description = data.get("description")  # TODO: Move none to empty string to backend
    image = data.get("image")
    duration = data["duration"]
    break_time = message.text.strip()

    if not await is_valid_duration_string(break_time):
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞ –ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç {html.bold('1m')} –∏–ª–∏ {html.bold('30s')}:"
        )
        return

    if not await is_exercise_break_time_valid(break_time, settings.validation.exercise):
        await message.answer(
            f"‚ùå –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç {html.bold('1m')} –∏–ª–∏ {html.bold('30s')}:"
        )
        await state.set_state(ExerciseAddingStates.waiting_for_break_time_input)
        return

    await workout_service.add_exercise(
        user_id=message.from_user.id,
        workout_id=workout_id,
        name=name,
        description=description,
        image=image,
        duration=duration,
        break_time=break_time,
    )

    await state.clear()
    await message.answer(
        f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É({html.bold(START_WORKOUT_COMMAND)}) –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."
    )
