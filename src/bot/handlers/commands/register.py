from aiogram import html
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.handlers.commands import router
from src.bot.message_templates import (
    INVALID_USERNAME_TEMPLATE,
    INVALID_PASSWORD_TEMPLATE,
)
from src.bot.shurtcuts.commands import (
    REGISTER_COMMAND,
    LOGIN_COMMAND,
    HELP_COMMAND,
)
from src.bot.states import RegistrationStates
from src.config import Settings
from src.services.business.auth import IAuthService
from src.services.business.exceptions import PasswordsDoNotMatchError
from src.services.validators.user import is_username_valid, is_password_valid


@router.message(Command(REGISTER_COMMAND.name))
async def command_register_handler(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    await state.set_state(RegistrationStates.username)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! üìù\n\n"
        f"1Ô∏è‚É£ –î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
        f"(–æ—Ç {settings.validation.user.username_min_length} –¥–æ "
        f"{settings.validation.user.username_max_length} —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@router.message(RegistrationStates.username)
async def process_username(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    username = message.text.strip()
    if not is_username_valid(username, settings.validation.user):
        await message.answer(
            INVALID_USERNAME_TEMPLATE.format(
                min_length=settings.validation.user.username_min_length,
                max_length=settings.validation.user.username_max_length,
            ),
        )
        return

    await state.update_data(username=username)
    await state.set_state(RegistrationStates.password)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {html.bold(username)}! ‚úÖ\n\n"
        f"2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–æ—Ç {settings.validation.user.password_min_length} "
        f"–¥–æ {settings.validation.user.password_max_length} —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@router.message(RegistrationStates.password)
async def process_password(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    password = message.text.strip()
    if not is_password_valid(password, settings.validation.user):
        await message.answer(
            INVALID_PASSWORD_TEMPLATE.format(
                min_length=settings.validation.user.username_min_length,
                max_length=settings.validation.user.username_max_length,
            ),
        )
        return

    await state.update_data(password=password)
    await state.set_state(RegistrationStates.password_retype)
    await message.answer("3Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:")


@router.message(RegistrationStates.password_retype)
async def process_password_retype(
    message: Message, state: FSMContext, auth_service: IAuthService
) -> None:
    data = await state.get_data()

    username = data["username"]
    original_password = data["password"]
    retyped_password = message.text.strip()

    try:
        await auth_service.register(username, original_password, retyped_password)
        await message.answer(
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É ({html.bold(LOGIN_COMMAND)}. "
            f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É {html.bold(HELP_COMMAND)}."
        )
        await state.clear()
    except PasswordsDoNotMatchError:
        await message.answer(
            "‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:"
        )
        await state.set_state(RegistrationStates.password)
