from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.handlers.commands import router
from src.bot.message_templates import (
    INVALID_WORKOUT_NAME_TEMPLATE,
)
from src.bot.services.shortcuts.commands import (
    ADD_WORKOUT_COMMAND,
)
from src.bot.states import WorkoutAddingStates
from src.config import Settings
from src.services.business.workouts import IWorkoutService
from src.services.validators.workout import is_name_valid


@router.message(Command(ADD_WORKOUT_COMMAND.name))
async def command_add_workout_handler(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    await state.set_state(WorkoutAddingStates.name)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
        f"1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–æ—Ç {settings.validation.workout.name_min_length} –¥–æ "
        f"{settings.validation.workout.name_max_length} —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@router.message(WorkoutAddingStates.name)
async def process_name(message: Message, state: FSMContext, settings: Settings) -> None:
    name = message.text.strip()
    if not is_name_valid(name, settings.validation.workout):
        await message.answer(
            INVALID_WORKOUT_NAME_TEMPLATE.format(
                min_length=settings.validation.workout.name_min_length,
                max_length=settings.validation.workout.name_max_length,
            ),
        )
        return

    await state.update_data(name=name)
    await state.set_state(WorkoutAddingStates.description)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        "2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ):"
    )


@router.message(WorkoutAddingStates.description)
async def process_description(
    message: Message, state: FSMContext, workout_service: IWorkoutService
) -> None:
    data = await state.get_data()

    name = data["name"]
    description = message.text.strip()

    await workout_service.create(
        user_id=message.from_user.id, name=name, description=description
    )

    await state.clear()
    await message.answer(
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
    )
