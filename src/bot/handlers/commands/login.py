from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.handlers.commands import router, LOGIN_COMMAND
from src.bot.message_templates import (
    INVALID_USERNAME_TEMPLATE,
    INVALID_PASSWORD_TEMPLATE,
)
from src.bot.states import LoginStates
from src.config import Settings
from src.services.business.auth import IAuthService
from src.services.validators.user import is_username_valid, is_password_valid


@router.message(Command(LOGIN_COMMAND))
async def command_login_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(LoginStates.username)
    await message.answer(
        "üõÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É!\n\n"
        "1Ô∏è‚É£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    )


@router.message(LoginStates.username)
async def process_username(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    username = message.text.strip()
    if not is_username_valid(username, settings.validation.user):
        await message.answer(
            INVALID_USERNAME_TEMPLATE.format(
                min_length=settings.validation.user.username_min_length,
                max_length=settings.validation.user.username_max_length,
            )
        )
        return

    await state.update_data(username=username)
    await state.set_state(LoginStates.password)
    await message.answer("2Ô∏è‚É£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@router.message(LoginStates.password)
async def process_password(
    message: Message,
    state: FSMContext,
    auth_service: IAuthService,
    settings: Settings,
) -> None:
    data = await state.get_data()

    username = data["username"]
    password = message.text.strip()

    if not is_password_valid(password, settings.validation.user):
        await message.answer(
            INVALID_PASSWORD_TEMPLATE.format(
                min_length=settings.validation.user.username_min_length,
                max_length=settings.validation.user.username_max_length,
            ),
        )
        return

    is_success = await auth_service.login(message.from_user.id, username, password)
    if is_success:
        await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É! üéâ")
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await state.clear()
