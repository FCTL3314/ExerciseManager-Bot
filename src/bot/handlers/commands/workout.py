from aiogram import html
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from src.bot.handlers.commands import router
from src.bot.keyboards.inline.workouts import get_workouts_keyboard
from src.bot.message_templates import (
    INVALID_WORKOUT_NAME_TEMPLATE,
    INVALID_EXERCISE_NAME_TEMPLATE,
)
from src.bot.services.shortcuts.commands import (
    ADD_WORKOUT_COMMAND,
    ADD_EXERCISE_COMMAND,
)
from src.bot.states import WorkoutAddingStates, ExerciseAddingStates
from src.config import Settings
from src.services.business.workouts import IWorkoutService
from src.services.exceptions import (
    InvalidDurationStringError,
    ExerciseBreakTooLongError,
)
from src.services.validators.exercise import is_name_valid as is_exercise_name_valid
from src.services.validators.workout import is_name_valid as is_workout_name_valid


@router.message(ADD_WORKOUT_COMMAND.as_filter())
async def command_add_workout_handler(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    await state.set_state(WorkoutAddingStates.waiting_for_name_input)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
        f"1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–æ—Ç {settings.validation.workout.name_min_length} –¥–æ "
        f"{settings.validation.workout.name_max_length} —Å–∏–º–≤–æ–ª–æ–≤):"
    )


@router.message(WorkoutAddingStates.waiting_for_name_input)
async def process_add_workout_name(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    name = message.text.strip()
    if not is_workout_name_valid(name, settings.validation.workout):
        await message.answer(
            INVALID_WORKOUT_NAME_TEMPLATE.format(
                min_length=settings.validation.workout.name_min_length,
                max_length=settings.validation.workout.name_max_length,
            ),
        )
        return

    await state.update_data(name=name)
    await state.set_state(WorkoutAddingStates.waiting_for_description_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        "2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ):"
    )


@router.message(WorkoutAddingStates.waiting_for_description_input)
async def process_add_workout_description(
    message: Message, state: FSMContext, workout_service: IWorkoutService
) -> None:
    data = await state.get_data()

    name = data["name"]
    description = message.text.strip()

    await workout_service.create(
        user_id=message.from_user.id, name=name, description=description
    )

    await state.clear()
    await message.answer(
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."
    )


@router.message(ADD_EXERCISE_COMMAND.as_filter())
async def command_add_exercise_handler(
    message: Message,
    state: FSMContext,
    workout_service: IWorkoutService,
) -> None:
    workouts = await workout_service.list(user_id=message.from_user.id)
    if not workouts:
        await message.answer(
            f"–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π({html.bold(ADD_WORKOUT_COMMAND)})."
        )
        return

    keyboard = await get_workouts_keyboard(workouts)
    await state.set_state(ExerciseAddingStates.waiting_for_workout_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
        reply_markup=keyboard,
    )


@router.message(ExerciseAddingStates.waiting_for_name_input)
async def process_add_exercise_name(
    message: Message, state: FSMContext, settings: Settings
) -> None:
    name = message.text.strip()
    if not is_exercise_name_valid(name, settings.validation.exercise):
        await message.answer(
            INVALID_EXERCISE_NAME_TEMPLATE.format(
                min_length=settings.validation.exercise.name_min_length,
                max_length=settings.validation.exercise.name_max_length,
            ),
        )
        return

    await state.update_data(name=name)
    await state.set_state(ExerciseAddingStates.waiting_for_description_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        "2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ):"
    )


@router.message(ExerciseAddingStates.waiting_for_description_input)
async def process_add_exercise_description(message: Message, state: FSMContext) -> None:
    description = message.text.strip()

    await state.update_data(description=description)
    await state.set_state(ExerciseAddingStates.waiting_for_duration_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f"3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä {html.bold("1m")} –∏–ª–∏ {html.bold("30s")}"
    )


@router.message(ExerciseAddingStates.waiting_for_duration_input)
async def process_add_exercise_description(message: Message, state: FSMContext) -> None:
    duration = message.text.strip()

    await state.update_data(duration=duration)
    await state.set_state(ExerciseAddingStates.waiting_for_break_time_input)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! ‚úÖ\n\n"
        f"3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä {html.bold("1m")} –∏–ª–∏ {html.bold("30s")}"
    )


@router.message(ExerciseAddingStates.waiting_for_break_time_input)
async def process_add_exercise_break_time(
    message: Message,
    state: FSMContext,
    workout_service: IWorkoutService,
) -> None:
    data = await state.get_data()

    workout_id = data["workout_id"]
    name = data["name"]
    description = data["description"]
    duration = data["duration"]
    break_time = message.text.strip()

    try:
        await workout_service.add_exercise(
            user_id=message.from_user.id,
            workout_id=workout_id,
            name=name,
            description=description,
            duration=duration,
            break_time=break_time,
        )
    except InvalidDurationStringError:
        await state.clear()
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ."
        )
        return
    except ExerciseBreakTooLongError:
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è.")
        return

    await state.clear()
    await message.answer(
        "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üéâ\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ª–∏–±–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø–∞—Ä—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."
    )
