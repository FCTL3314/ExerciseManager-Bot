from http import HTTPStatus
from logging import Logger

from aiogram import html, F
from aiogram.filters import ExceptionTypeFilter
from aiogram.types import ErrorEvent, Message
from aiohttp import ClientResponseError

from src.bot.handlers.errors import router


@router.error(ExceptionTypeFilter(ClientResponseError), F.update.message.as_("message"))
async def api_error_handler(event: ErrorEvent, message: Message, logger: Logger):
    status = HTTPStatus(event.exception.status)  # noqa
    match status:
        case HTTPStatus.UNAUTHORIZED:
            await message.answer(
                f"‚ùå –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É {html.bold('/login')}."
            )
        case HTTPStatus.FORBIDDEN:
            await message.answer(
                "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        case HTTPStatus.NOT_FOUND:
            await message.answer(
                "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        case HTTPStatus.INTERNAL_SERVER_ERROR:
            await message.answer(
                "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ."
            )
        case (
            HTTPStatus.BAD_GATEWAY
            | HTTPStatus.SERVICE_UNAVAILABLE
            | HTTPStatus.GATEWAY_TIMEOUT
        ):
            await message.answer(
                "üåê –í–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            )
        case _:
            await message.answer(
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É —Ä–µ—Å—É—Ä—Å—É. –°—Ç–∞—Ç—É—Å: {status}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            logger.warning(
                f"Unhandled backend request error:",
                exc_info=True,
            )
